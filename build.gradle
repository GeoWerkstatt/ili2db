group 'ch.interlis'
version '3.12.4'+System.getProperty('release','-SNAPSHOT')

apply plugin: "java"
apply plugin: "maven"

configurations {
	ili2db
	ili2pgCompileClasspath {
		extendsFrom implementation
	}
	ili2pgRuntimeClasspath {
		extendsFrom runtimeOnly
		extendsFrom ili2pgCompileClasspath
	}
	ili2pgTestCompileClasspath {
		extendsFrom testImplementation
		extendsFrom ili2pgCompileClasspath
	}
	ili2gpkgCompileClasspath {
		extendsFrom implementation
	}
	ili2gpkgRuntimeClasspath {
		extendsFrom runtimeOnly
		extendsFrom ili2gpkgCompileClasspath
	}
	ili2gpkgTestCompileClasspath {
		extendsFrom testImplementation
		extendsFrom ili2gpkgCompileClasspath
	}
	ili2fgdbCompileClasspath {
		extendsFrom implementation
	}
	ili2fgdbRuntimeClasspath {
		extendsFrom runtimeOnly
		extendsFrom ili2fgdbCompileClasspath
	}
	ili2fgdbTestCompileClasspath {
		extendsFrom testImplementation
		extendsFrom ili2fgdbCompileClasspath
	}
	ili2mssqlCompileClasspath {
		extendsFrom implementation
	}
	ili2mssqlRuntimeClasspath {
		extendsFrom runtimeOnly
		extendsFrom ili2mssqlCompileClasspath
	}
	ili2mssqlTestCompileClasspath {
		extendsFrom testImplementation
		extendsFrom ili2mssqlCompileClasspath
	}
	ili2oraCompileClasspath {
		extendsFrom implementation
	}
	ili2oraRuntimeClasspath {
		extendsFrom runtimeOnly
		extendsFrom ili2oraCompileClasspath
	}
	ili2oraTestCompileClasspath {
		extendsFrom testImplementation
		extendsFrom ili2oraCompileClasspath
	}
    deployerJars
}

sourceCompatibility = "1.6" 
targetCompatibility = "1.6"
compileJava.options.encoding = 'US-ASCII'


// to get the latest SNAPSHOT uncomment the following lines
//configurations.all {
    // check for updates every build
//    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
//}

dependencies {
    implementation group: 'ch.interlis', name: 'iox-ili', version: '1.20.9'
    implementation group: 'ch.interlis', name: 'ili2c-tool', version: "4.7.9"
    implementation group: 'ch.ehi', name: 'ehisqlgen', version: "1.13.6"
    testImplementation group: 'junit', name: 'junit', version: '4.12'
	testImplementation group: 'org.hamcrest', name: 'hamcrest-library', version: '1.3'
	ili2pgCompileClasspath group: 'org.postgresql', name: 'postgresql', version: '42.1.4.jre6'
	compileOnly group: 'org.postgresql', name: 'postgresql', version: '42.1.4.jre6' // add as compileOnly, so that eclipse sees it
	ili2gpkgCompileClasspath group: 'org.xerial', name: 'sqlite-jdbc', version: '3.8.11.2'
	compileOnly group: 'org.xerial', name: 'sqlite-jdbc', version: '3.8.11.2' // add as compileOnly, so that eclipse sees it
	ili2fgdbCompileClasspath group: 'ch.ehi', name: 'fgdb4j', version: "1.1.1"
	compileOnly group: 'ch.ehi', name: 'fgdb4j', version: "1.1.1" // add as compileOnly, so that eclipse sees it
	ili2mssqlCompileClasspath group: 'com.microsoft.sqlserver', name: 'mssql-jdbc', version: '6.4.0.jre7'
	ili2oraCompileClasspath files('lib/ojdbc14.jar')
	ili2db group: project.group, name: project.name, version: project.version
    deployerJars "org.apache.maven.wagon:wagon-ftp:3.0.0"
}

repositories {
    mavenLocal()
    maven {
        url "http://jars.interlis.ch"
    }
    mavenCentral()
}

Properties properties = new Properties()
File propFile=project.rootProject.file('user.properties')
if(propFile.exists()){
	properties.load(propFile.newDataInputStream())
}
def git = System.getProperty('git',properties.get('git','git'))
def repos_pwd = System.getProperty('repos_pwd',properties.get('repos_pwd','repos_pwd'))
def repos_usr = System.getProperty('repos_usr',properties.get('repos_usr','repos_usr'))
def dburl = System.getProperty('dburl',properties.get('dburl'))
def dbusr = System.getProperty('dbusr',properties.get('dbusr'))
def dbpwd = System.getProperty('dbpwd',properties.get('dbpwd'))
def python= System.getProperty('python',properties.get('python','python'))
def rst2html= System.getProperty('rst2html',properties.get('rst2html','rst2html'))
    
def generatedResources = "$buildDir/generated-resources/main"

def getGitHash = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine git, 'rev-parse', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

sourceSets {
  main {
    //let's register an output folder on the main SourceSet:
    //it is now a part of the 'main' classpath and will be a part of the jar
    output.dir(generatedResources, builtBy: 'generateMyResources')
    java {
    	srcDirs=['src']
    }
  }
  test {
  	  java {
  	  	  srcDirs=['test/java']
  	  }
  }
  ili2pg {
    java {
    	srcDirs=['ili2pg/src']
    }
    compileClasspath += sourceSets.main.output
  }
  ili2pgTest {
    java {
    	srcDirs=['ili2pg/test/java']
    }
    //compileClasspath = [ configurations.ili2pgCompileClasspath, configurations.testImplementation]
    compileClasspath += sourceSets.main.output
    compileClasspath += sourceSets.ili2pg.output
    runtimeClasspath += sourceSets.main.output
    runtimeClasspath += sourceSets.ili2pg.output
  }
  ili2gpkg {
    java {
    	srcDirs=['ili2gpkg/src']
    }
    resources {
    	srcDirs=['ili2gpkg/src']
    	include '**/init.sql'
    }
    compileClasspath += sourceSets.main.output
  }
  ili2gpkgTest {
    java {
    	srcDirs=['ili2gpkg/test/java']
    }
    compileClasspath += sourceSets.main.output
    compileClasspath += sourceSets.ili2gpkg.output
    runtimeClasspath += sourceSets.main.output
    runtimeClasspath += sourceSets.ili2gpkg.output
  }
  ili2fgdb {
    java {
    	srcDirs=['ili2fgdb/src']
    }
    compileClasspath += sourceSets.main.output
  }
  ili2fgdbTest {
    java {
    	srcDirs=['ili2fgdb/test/java']
    }
    compileClasspath += sourceSets.main.output
    compileClasspath += sourceSets.ili2fgdb.output
    runtimeClasspath += sourceSets.main.output
    runtimeClasspath += sourceSets.ili2fgdb.output
  }
  ili2mssql {
    java {
    	srcDirs=['ili2mssql/src']
    }
    compileClasspath += sourceSets.main.output
  }
  ili2mssqlTest {
    java {
    	srcDirs=['ili2mssql/test/java']
    }
    compileClasspath += sourceSets.main.output
    compileClasspath += sourceSets.ili2mssql.output
    runtimeClasspath += sourceSets.main.output
    runtimeClasspath += sourceSets.ili2mssql.output
  }
  ili2ora {
    java {
    	srcDirs=['ili2ora/src']
    }
    compileClasspath += sourceSets.main.output
  }
  ili2oraTest {
    java {
    	srcDirs=['ili2ora/test/java']
    }
    compileClasspath += sourceSets.main.output
    compileClasspath += sourceSets.ili2ora.output
    runtimeClasspath += sourceSets.main.output
    runtimeClasspath += sourceSets.ili2ora.output
  }
}
task printcp {
	doLast{
		//sourceSets.main.output.each { println it }
		// components.java.each { println it }
		System.out.println components.java
	}
}
task usrdoc(type:Exec) {
	def infile=new File(project.projectDir,'docs/ili2db.rst')
	def outfile=new File('docs/ili2db.html')
	inputs.file infile
	outputs.file outfile
	doFirst{
		new File(project.buildDir,'docs').mkdir()
	}
		workingDir = project.buildDir
		executable python
		args = [rst2html, infile, outfile]
}
task ili2pgJar(dependsOn: jar,type: Jar) {
	baseName = 'ili2pg'
    from sourceSets.ili2pg.output
  manifest {
    attributes(
      "Main-Class": "ch.ehi.ili2pg.PgMain",
      "Class-Path": 'libs/'+jar.archiveName+' '+configurations.ili2pgRuntimeClasspath.collect { 'libs/'+it.getName() }.join(' '))
  }   
}
task ili2pgBindist(dependsOn:[usrdoc,ili2pgJar], type: Zip){
	baseName = 'ili2pg'
    classifier 'bindist'
	destinationDir = file('dist')
	from ili2pgJar
	into('docs'){
		from files(fileTree("docs").include("LICENSE.*"),"docs/README.txt","docs/CHANGELOG.txt","build/docs/ili2db.html")
	}
	into('libs'){
		from configurations.ili2pgRuntimeClasspath
		from jar
		//def jars=[]
		//subprojects.each {
        //	jars+=it.libsDir
        //}
        //from jars
	}
	// version = '1.0.6'
}
task ili2pgTest(type: Test) {
	maxParallelForks = 1
	forkEvery = 1
    testClassesDirs = sourceSets.ili2pgTest.output.classesDirs
    classpath = configurations.ili2pgTestCompileClasspath
    classpath += sourceSets.main.output
    classpath += sourceSets.ili2pg.output
    classpath += sourceSets.ili2pgTest.output 
	systemProperty 'dburl', dburl
	systemProperty 'dbusr', dbusr
	systemProperty 'dbpwd', dbpwd
    testLogging.exceptionFormat = 'full'
}
task ili2gpkgJar(dependsOn: jar,type: Jar) {
	baseName = 'ili2gpkg'
    from sourceSets.ili2gpkg.output
  manifest {
    attributes(
      "Main-Class": "ch.ehi.ili2gpkg.GpkgMain",
      "Class-Path": 'libs/'+jar.archiveName+' '+configurations.ili2gpkgRuntimeClasspath.collect { 'libs/'+it.getName() }.join(' '))
  }   
}
task ili2gpkgBindist(dependsOn:[usrdoc,ili2gpkgJar], type: Zip){
	baseName = 'ili2gpkg'
    classifier 'bindist'
	destinationDir = file('dist')
	from ili2gpkgJar
	into('docs'){
		from files(fileTree("docs").include("LICENSE.*"),"docs/README.txt","docs/CHANGELOG.txt","build/docs/ili2db.html")
	}
	into('libs'){
		from configurations.ili2gpkgRuntimeClasspath
		from jar
	}
}
task ili2gpkgTest(type: Test) {
	maxParallelForks = 1
	forkEvery = 1
    testClassesDirs = sourceSets.ili2gpkgTest.output.classesDirs
    classpath = configurations.ili2gpkgTestCompileClasspath
    classpath += sourceSets.main.output
    classpath += sourceSets.ili2gpkg.output
    classpath += sourceSets.ili2gpkgTest.output 
    testLogging.exceptionFormat = 'full'
}
task ili2fgdbJar(dependsOn: jar,type: Jar) {
	baseName = 'ili2fgdb'
    from sourceSets.ili2fgdb.output
  manifest {
    attributes(
      "Main-Class": "ch.ehi.ili2fgdb.FgdbMain",
      "Class-Path": 'libs/'+jar.archiveName+' '+configurations.ili2fgdbRuntimeClasspath.collect { 'libs/'+it.getName() }.join(' '))
  }   
}
task ili2fgdbBindist(dependsOn:[usrdoc,ili2fgdbJar], type: Zip){
	baseName = 'ili2fgdb'
    classifier 'bindist'
	destinationDir = file('dist')
	from ili2fgdbJar
	into('docs'){
		from files(fileTree("docs").include("LICENSE.*"),"docs/README.txt","docs/CHANGELOG.txt","build/docs/ili2db.html")
	}
	into('libs'){
		from configurations.ili2fgdbRuntimeClasspath
		from jar
	}
}
task ili2fgdbTest(type: Test) {
	maxParallelForks = 1
	forkEvery = 1
    testClassesDirs = sourceSets.ili2fgdbTest.output.classesDirs
    classpath = configurations.ili2fgdbTestCompileClasspath
    classpath += sourceSets.main.output
    classpath += sourceSets.ili2fgdb.output
    classpath += sourceSets.ili2fgdbTest.output 
    testLogging.exceptionFormat = 'full'
}
task ili2mssqlJar(dependsOn: jar,type: Jar) {
	baseName = 'ili2mssql'
    from sourceSets.ili2mssql.output
  manifest {
    attributes(
      "Main-Class": "ch.ehi.ili2mssql.MsSqlMain",
      "Class-Path": 'libs/'+jar.archiveName+' '+configurations.ili2mssqlRuntimeClasspath.collect { 'libs/'+it.getName() }.join(' '))
  }   
}
task ili2mssqlBindist(dependsOn:[usrdoc,ili2mssqlJar], type: Zip){
	baseName = 'ili2mssql'
    classifier 'bindist'
	destinationDir = file('dist')
	from ili2mssqlJar
	into('docs'){
		from files(fileTree("docs").include("LICENSE.*"),"docs/README.txt","docs/CHANGELOG.txt","build/docs/ili2db.html")
	}
	into('libs'){
		from configurations.ili2mssqlRuntimeClasspath
		from jar
	}
}
task ili2mssqlTest(type: Test) {
	maxParallelForks = 1
	forkEvery = 1
    testClassesDirs = sourceSets.ili2mssqlTest.output.classesDirs
    classpath = configurations.ili2mssqlTestCompileClasspath
    classpath += sourceSets.main.output
    classpath += sourceSets.ili2mssql.output
    classpath += sourceSets.ili2mssqlTest.output 
    testLogging.exceptionFormat = 'full'
}
task ili2oraJar(dependsOn: jar,type: Jar) {
	baseName = 'ili2ora'
    from sourceSets.ili2ora.output
  manifest {
    attributes(
      "Main-Class": "ch.ehi.ili2ora.OraMain",
      "Class-Path": 'libs/'+jar.archiveName+' '+configurations.ili2oraRuntimeClasspath.collect { 'libs/'+it.getName() }.join(' '))
  }   
}
task ili2oraBindist(dependsOn:[usrdoc,ili2oraJar], type: Zip){
	baseName = 'ili2ora'
    classifier 'bindist'
	destinationDir = file('dist')
	from ili2oraJar
	into('docs'){
		from files(fileTree("docs").include("LICENSE.*"),"docs/README.txt","docs/CHANGELOG.txt","build/docs/ili2db.html")
	}
	into('libs'){
		from configurations.ili2oraRuntimeClasspath
		from jar
	}
}
task ili2oraTest(type: Test) {
	maxParallelForks = 1
	forkEvery = 1
    testClassesDirs = sourceSets.ili2oraTest.output.classesDirs
    classpath = configurations.ili2oraTestCompileClasspath
    classpath += sourceSets.main.output
    classpath += sourceSets.ili2ora.output
    classpath += sourceSets.ili2oraTest.output 
    testLogging.exceptionFormat = 'full'
}

task generateMyResources {
	doLast {
		def versionProps = new Properties()
		versionProps.setProperty('version', "$project.version")
		versionProps.setProperty('versionCommit', getGitHash())
		def versionPropsFile = new File(generatedResources,"ch/ehi/ili2db/Version.properties")
		versionPropsFile.getParentFile().mkdirs();
		versionProps.store(versionPropsFile.newWriter(), null);
	}
}

test {
	// when Gradle forks a new Java process, it does not automatically pass the 
	// environment variable values along to the new environment. One has to 
	// explicitly pass these variables
	systemProperty 'dburl', dburl
	systemProperty 'dbusr', dbusr
	systemProperty 'dbpwd', dbpwd
    testLogging.exceptionFormat = 'full'
}

configurations {
    antClasspath
}

dependencies {
    antClasspath group: 'org.apache.ant', name: 'ant-junit', version: '1.9.13'

}

ClassLoader antClassLoader = org.apache.tools.ant.Project.class.classLoader
 configurations.antClasspath.each { File f ->
   antClassLoader.addURL(f.toURI().toURL())
 
}
task testreport {
	doLast{
		//ant.taskdef(name: 'antClasspath',
        //            classname: 'org.apache.tools.ant.taskdefs.optional.junit.XMLResultAggregator',
        //            classpath: configurations.antClasspath.asPath)
		ant.delete(dir:'build/junitreport', quiet:'true')
		ant.mkdir(dir:'build/junitreport')
		ant.junitreport(todir: 'build/junitreport/', tofile: 'ceis.xml'){
			fileset(dir:"build/test-results"){
				include(name: "**/TEST-*.xml")
			}
			report(todir: 'build/junitreport',format: 'noframes', styledir: 'travis'){
			}
		}
	}
}

// use plugin 'maven' instead of 'maven-publish', 
// because 'maven-publish' doesn't support ftp repository access
artifacts {
    archives(jar.archivePath){
    	builtBy jar
    }
	archives(ili2pgBindist.archivePath) {
        type 'zip'
        classifier 'bindist'
        builtBy ili2pgBindist
    }
    archives(ili2pgJar.archivePath){
    	builtBy ili2pgJar
    }
	archives(ili2gpkgBindist.archivePath) {
        type 'zip'
        classifier 'bindist'
        builtBy ili2gpkgBindist
    }
    archives(ili2gpkgJar.archivePath){
    	builtBy ili2gpkgJar
    }
	archives(ili2fgdbBindist.archivePath) {
        type 'zip'
        classifier 'bindist'
        builtBy ili2fgdbBindist
    }
    archives(ili2fgdbJar.archivePath){
    	builtBy ili2fgdbJar
    }
	archives(ili2mssqlBindist.archivePath) {
        type 'zip'
        classifier 'bindist'
        builtBy ili2mssqlBindist
    }
    archives(ili2mssqlJar.archivePath){
    	builtBy ili2mssqlJar
    }
	archives(ili2oraBindist.archivePath) {
        type 'zip'
        classifier 'bindist'
        builtBy ili2oraBindist
    }
    archives(ili2oraJar.archivePath){
    	builtBy ili2oraJar
    }
}

install {
    repositories {
    	mavenInstaller {
            addFilter('ili2db') {artifact, file ->
                artifact.name == 'ili2db'
            }            
            addFilter('ili2pg') {artifact, file ->
                artifact.name == 'ili2pg'
            }            
            addFilter('ili2gpkg') {artifact, file ->
                artifact.name == 'ili2gpkg'
            }            
            addFilter('ili2fgdb') {artifact, file ->
                artifact.name == 'ili2fgdb'
            }            
            addFilter('ili2mssql') {artifact, file ->
                artifact.name == 'ili2mssql'
            }            
            addFilter('ili2ora') {artifact, file ->
                artifact.name == 'ili2ora'
            }            
            pom('ili2db').artifactId = 'ili2db'
            pom('ili2db').scopeMappings.with {
                mappings.clear()
                addMapping(300, configurations.implementation, 'runtime')
            }
            pom('ili2pg').artifactId = 'ili2pg'
            pom('ili2pg').scopeMappings.with {
                mappings.clear()
                addMapping(300, configurations.ili2pgCompileClasspath, 'runtime')
                addMapping(300, configurations.ili2db, 'runtime')
            }
            pom('ili2gpkg').artifactId = 'ili2gpkg'
            pom('ili2gpkg').scopeMappings.with {
                mappings.clear()
                addMapping(300, configurations.ili2gpkgCompileClasspath, 'runtime')
                addMapping(300, configurations.ili2db, 'runtime')
            }
            pom('ili2fgdb').artifactId = 'ili2fgdb'
            pom('ili2fgdb').scopeMappings.with {
                mappings.clear()
                addMapping(300, configurations.ili2fgdbCompileClasspath, 'runtime')
                addMapping(300, configurations.ili2db, 'runtime')
            }
            pom('ili2mssql').artifactId = 'ili2mssql'
            pom('ili2mssql').scopeMappings.with {
                mappings.clear()
                addMapping(300, configurations.ili2mssqlCompileClasspath, 'runtime')
                addMapping(300, configurations.ili2db, 'runtime')
            }
            pom('ili2ora').artifactId = 'ili2ora'
            pom('ili2ora').scopeMappings.with {
                mappings.clear()
                addMapping(300, configurations.ili2oraCompileClasspath, 'runtime')
                addMapping(300, configurations.ili2db, 'runtime')
            }
    	}
    }
}

uploadArchives {
    repositories {
        mavenDeployer {
        	configuration = configurations.deployerJars
			repository(url: 'ftp://ftp.interlis.ch'){
            	authentication(userName: repos_usr, password: repos_pwd)
            }
            addFilter('ili2db') {artifact, file ->
                artifact.name == 'ili2db'
            }            
            addFilter('ili2pg') {artifact, file ->
                artifact.name == 'ili2pg'
            }            
            addFilter('ili2gpkg') {artifact, file ->
                artifact.name == 'ili2gpkg'
            }            
            addFilter('ili2fgdb') {artifact, file ->
                artifact.name == 'ili2fgdb'
            }            
            addFilter('ili2mssql') {artifact, file ->
                artifact.name == 'ili2mssql'
            }            
            addFilter('ili2ora') {artifact, file ->
                artifact.name == 'ili2ora'
            }            
            pom('ili2db').artifactId = 'ili2db'
            pom('ili2db').scopeMappings.with {
                mappings.clear()
                addMapping(300, configurations.implementation, 'runtime')
            }
            pom('ili2pg').artifactId = 'ili2pg'
            pom('ili2pg').scopeMappings.with {
                mappings.clear()
                addMapping(300, configurations.ili2pgCompileClasspath, 'runtime')
                addMapping(300, configurations.ili2db, 'runtime')
            }
            pom('ili2gpkg').artifactId = 'ili2gpkg'
            pom('ili2gpkg').scopeMappings.with {
                mappings.clear()
                addMapping(300, configurations.ili2gpkgCompileClasspath, 'runtime')
                addMapping(300, configurations.ili2db, 'runtime')
            }
            pom('ili2fgdb').artifactId = 'ili2fgdb'
            pom('ili2fgdb').scopeMappings.with {
                mappings.clear()
                addMapping(300, configurations.ili2fgdbCompileClasspath, 'runtime')
                addMapping(300, configurations.ili2db, 'runtime')
            }
            pom('ili2mssql').artifactId = 'ili2mssql'
            pom('ili2mssql').scopeMappings.with {
                mappings.clear()
                addMapping(300, configurations.ili2mssqlCompileClasspath, 'runtime')
                addMapping(300, configurations.ili2db, 'runtime')
            }
            pom('ili2ora').artifactId = 'ili2ora'
            pom('ili2ora').scopeMappings.with {
                mappings.clear()
                addMapping(300, configurations.ili2oraCompileClasspath, 'runtime')
                addMapping(300, configurations.ili2db, 'runtime')
            }
        }
    }
}