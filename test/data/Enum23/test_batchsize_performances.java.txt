package ch.ehi.ili2pg;

import java.io.File;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.HashMap;

import org.junit.Assert;
import org.junit.Test;

import ch.ehi.ili2db.AbstractTestSetup;
import ch.ehi.ili2db.base.DbNames;
import ch.ehi.ili2db.base.Ili2db;
import ch.ehi.ili2db.dbmetainfo.DbExtMetaInfo;
import ch.ehi.ili2db.gui.Config;
import ch.ehi.sqlgen.DbUtility;
import ch.ehi.sqlgen.repository.DbTableName;
import ch.interlis.iom.IomObject;
import ch.interlis.iom_j.xtf.XtfReader;
import ch.interlis.iox.EndBasketEvent;
import ch.interlis.iox.EndTransferEvent;
import ch.interlis.iox.IoxEvent;
import ch.interlis.iox.ObjectEvent;
import ch.interlis.iox.StartBasketEvent;
import ch.interlis.iox.StartTransferEvent;

//-Ddburl=jdbc:postgresql:dbname -Ddbusr=usrname -Ddbpwd=1234
public class Enum23Test extends ch.ehi.ili2db.Enum23Test{
	private static final String DBSCHEMA = "Enum23";
    String dburl;
    String dbuser;
    String dbpwd;
	Connection jdbcConnection=null;
	Statement stmt=null;

    @Override
    protected AbstractTestSetup createTestSetup() {
        dburl=System.getProperty("dburl");
        dbuser=System.getProperty("dbusr");
        dbpwd=System.getProperty("dbpwd");
        return new PgTestSetup(dburl,dbuser,dbpwd,DBSCHEMA);
    }

	public Config initConfig(String xtfFilename,String dbschema,String logfile) {
		Config config=new Config();
		new ch.ehi.ili2pg.PgMain().initConfig(config);
		config.setDburl(dburl);
		config.setDbusr(dbuser);
		config.setDbpwd(dbpwd);
		if(dbschema!=null){
			config.setDbschema(dbschema);
		}
		if(logfile!=null){
			config.setLogfile(logfile);
		}
		config.setXtffile(xtfFilename);
		if(xtfFilename!=null && Ili2db.isItfFilename(xtfFilename)){
			config.setItfTransferfile(true);
		}
		return config;
	}

    @Test
    public void batchSizePerformanceTest() throws Exception {
        int zero = 0;
        int fivehundred = 500;

        int nbTests = 5;
        System.out.println("WITHOUT BATCHSIZE");
        for (int i = 0; i < nbTests; i++) {
            importXtfBatchsizeTest(zero);
        }
        System.out.println("WITH BATCHSIZE " + fivehundred);
        for (int i = 0; i < nbTests; i++) {
            importXtfBatchsizeTest(fivehundred);
        }

    }

    @Test
    public void generateIliData() {
        for (int index = 2; index < 500; index++) {
            System.out.println("    CLASS ClassA" + index + " EXTENDS ClassA1 =");
            System.out.println("    END ClassA" + index + ";");
            System.out.println();
        }
    }

    private void importXtfBatchsizeTest(Integer batchSize) throws Exception {
        //EhiLogger.getInstance().setTraceFilter(false);
        Connection jdbcConnection = null;
        try {
            Class driverClass = Class.forName("org.postgresql.Driver");
            jdbcConnection = DriverManager.getConnection(
                    dburl, dbuser, dbpwd);
            stmt = jdbcConnection.createStatement();
            stmt.execute("DROP SCHEMA IF EXISTS " + DBSCHEMA + " CASCADE");
            {
                File data = new File("test/data/Enum23/Enum23d.xtf");
                Config config = initConfig(data.getPath(), DBSCHEMA, data.getPath() + ".log");
                config.setFunction(Config.FC_IMPORT);
                config.setDoImplicitSchemaImport(true);
                config.setCreateFk(Config.CREATE_FK_YES);
                config.setTidHandling(Config.TID_HANDLING_PROPERTY);
                config.setImportTid(true);
                config.setBasketHandling(Config.BASKET_HANDLING_READWRITE);
                config.setCreateEnumDefs(Config.CREATE_ENUM_DEFS_MULTI_WITH_ID);
                config.setCatalogueRefTrafo(null);
                config.setMultiSurfaceTrafo(null);
                config.setMultilingualTrafo(null);
                config.setInheritanceTrafo(null);
                if (batchSize != null) {
                    config.setBatchSize(batchSize);
                }
                Ili2db.readSettingsFromDb(config);
                Ili2db.run(config, null);
                {
                    String stmtTxt = "select iliCode from " + DBSCHEMA + ".classa1 left join " + DBSCHEMA + ".enum1 on classa1.attr1=enum1.t_id where t_ili_tid='1a'";
                    ResultSet rs = stmt.executeQuery(stmtTxt);
                    Assert.assertTrue(rs.next());
                    Assert.assertEquals("Test2", rs.getString(1));
                    rs.close();
                }
                {
                    String stmtTxt = "select iliCode from " + DBSCHEMA + ".classa1 left join " + DBSCHEMA + ".enum1 on classa1.attr1=enum1.t_id where t_ili_tid='1b'";
                    ResultSet rs = stmt.executeQuery(stmtTxt);
                    Assert.assertTrue(rs.next());
                    Assert.assertEquals("Test2.Test2bA", rs.getString(1));
                    rs.close();
                }
                {
                    String stmtTxt = "select iliCode from " + DBSCHEMA + ".classa1 left join " + DBSCHEMA + ".enum1 on classa1.attr1=enum1.t_id where t_ili_tid='1c'";
                    ResultSet rs = stmt.executeQuery(stmtTxt);
                    Assert.assertTrue(rs.next());
                    Assert.assertEquals("Test2.Test2cA", rs.getString(1));
                    rs.close();
                }
                {
                    String stmtTxt = "select iliCode from " + DBSCHEMA + ".classa1 left join " + DBSCHEMA + ".enum1 on classa1.attr1=enum1.t_id where t_ili_tid='1cc'";
                    ResultSet rs = stmt.executeQuery(stmtTxt);
                    Assert.assertTrue(rs.next());
                    Assert.assertEquals("Test2.Test2cA", rs.getString(1));
                    rs.close();
                }
                {
                    String stmtTxt = "select iliCode from " + DBSCHEMA + ".classa1 left join " + DBSCHEMA + ".enum1 on classa1.attr1=enum1.t_id where t_ili_tid='1ccc'";
                    ResultSet rs = stmt.executeQuery(stmtTxt);
                    Assert.assertTrue(rs.next());
                    Assert.assertEquals("Test2.Test2cA.Test2cAA", rs.getString(1));
                    rs.close();
                }
            }
        } finally {
            if (jdbcConnection != null) {
                jdbcConnection.close();
            }
        }
    }

}
